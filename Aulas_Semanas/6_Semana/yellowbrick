import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

df = pd.read_csv('train.csv')

cons = pd.DataFrame({'colunas' : df.columns,
                    'tipo': df.dtypes,
                    'missing' : df.isna().sum(),
                    'size' : df.shape[0],
                    'unicos': df.nunique()})
cons['percentual'] = round(cons['missing'] / cons['size'],2)

cons['completa'] = ['completa' if x == 0 else 'faltante' for x in cons['percentual']]

mantem = list(cons[cons['completa'] == 'completa']['colunas'])
df = df[mantem]

colunas_numericas = list(cons[((cons['tipo'] != 'object') & (cons['completa'] == 'completa'))]['colunas'])

colunas_numericas.remove('Id')
df = df[colunas_numericas]

y_train = df['SalePrice']
X_train = df.drop(columns = 'SalePrice')

from yellowbrick.features import Rank1D

visualizador = Rank1D(algorithm='shapiro')

visualizador.fit(X_train, y_train)
visualizador.transform(X_train)
visualizador.show()

correlacionadas = ['GarageArea', 'GarageCars', 'GrLivArea', 'OverallQual']

from yellowbrick.features import PCA

visualizador = PCA(scale = True, proj_features = True, projection = 3)
visualizador.fit_transform(X_train[correlacionadas], y_train)
visualizador.show()

from yellowbrick.target import FeatureCorrelation

features = list(X_train.columns)

visualizador = FeatureCorrelation(labels = features)

visualizador.fit(X_train, y_train)
visualizador.show
